%YAML 1.2
---
name: SMPL
file_extensions:
  - smpl
scope: source.smpl

variables:
  letter: '[[:alpha:]]'
  digit: '[0-9]'
  relop: '==|!=|<|<=|>|>='

  endexpr: '{{relop}}|then|do'
  endstats: 'else|fi|od'

  ident: '{{letter}}[{{letter}}{{digit}}]*'
  number: '{{digit}}+'

  builtin_functions: \b(InputNum|OutputNum|OutputNewLine)\b

contexts:
  main:
    - meta_include_prototype: false
    - match: ''
      push: [computation]

  computation:
    - match: \bmain\b
      scope: keyword.control.main.smpl
      push:
        - include: vardecl
        - include: funcdecl
        - match: '{'
          scope: punctuation.section.block.begin.smpl
          push: [period, statsequence]
          pop: true
      pop: true

  period:
    - match: '\.'
      scope: punctuation.terminator.smpl
      pop: true

  vardecl:
    - match: \bvar\b
      scope: storage.type
      push: [varlist]
    - match: \barray\b\s*
      scope: storage.type
      push: [varlist, brackets]

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.smpl
      push:
        - meta_scope: meta.brackets.smpl
        - match: \]
          scope: punctuation.section.brackets.end.smpl
          pop: true
        - match: '{{number}}'
          scope: constant.numeric.integer.smpl
    - match: (?!\[)
      pop: true

  varlist:
  - match: '\b{{ident}}'
    scope: source.smpl
  - match: ','
    scope: punctuation.separator.smpl
  - match: ;
    scope: punctuation.terminator.smpl
    pop: true

  funcdecl:
    - match: \bvoid\b
      scope: storage.modifier.void.smpl meta.function.return-type.smpl
    - match: \bfunction\b
      scope: storage.type.function.smpl keyword.declaration.function.smpl
      push: [funcbody, funcparams]

  funcparams:
    - match: '\b{{ident}}\b'
      scope: entity.name.function.smpl
      push:
        - match: \(
          scope: meta.function.parameters.smpl punctuation.section.parameters.begin.smpl
          push:
            - meta_content_scope: meta.function.parameters.smpl
            - meta_scope: meta.group.smpl
            - match: '\b{{ident}}\b'
              scope: variable.parameter.smpl
            - match: ','
              scope: punctuation.separator.parameters.smpl
            - match: \)
              scope: punctuation.section.parameters.end.smpl
              pop: true
        - match: ;
          scope: punctuation.terminator.smpl
          pop: true
        - match: '\n'
          pop: true
      pop: true


  funcbody:
    - meta_content_scope: meta.function.smpl
    - include: vardecl
    - match: '\{'
      scope: punctuation.section.block.begin.smpl
      push:
        - meta_content_scope: meta.function.smpl meta.block.smpl
        - include: statsequence
    - match: ;
      scope: punctuation.terminator.smpl
      pop: true

  statsequence:
    - match: '(?={{endstats}})'
      pop: true
    - include: statement
    - match: '}'
      scope: punctuation.section.block.end.smpl
      pop: true

  statement:
    - include: assignment
    - include: funccall
    - include: ifstatement
    - include: whilestatement
    - include: returnstatement
    - match: ;
      scope: punctuation.terminator.smpl

  returnstatement:
    - match: \breturn\b\s*
      scope: keyword.control.flow.return.smpl
      push:
        - match: '(?=;|\n)'
          pop: true
        - match: '(?!;|\n)'
          push: [expression]
          pop: true

  whilestatement:
    - match: \bwhile\b
      scope: keyword.control.loop.while.smpl
      push: [od, statsequence, do, relation]

  do:
    - match: \bdo\b
      scope: keyword.control.loop.do.smpl
      pop: true

  od:
    - match: \bod\b
      scope: keyword.control.loop.od.smpl
      pop: true

  ifstatement:
    - match: \bif\b
      scope: keyword.control.conditional.if.smpl
      push: [fi, statsequence, else, statsequence, then, relation]

  relation:
    - match: ''
      set: [expression, relop, expression]

  then:
    - match: \bthen\b
      scope: keyword.control.conditional.then.smpl
      pop: true

  else:
    - match: \belse\b
      scope: keyword.control.conditional.else.smpl
      pop: true
    - match: (?=\bfi\b)
      pop: true

  fi:
    - match: \bfi\b
      scope: keyword.control.conditional.fi.smpl
      pop: true

  relop:
    - match: '{{relop}}'
      scope: keyword.operator.comparison.smpl
      pop: true

  assignment:
    - match: \blet\b
      scope: keyword.declaration.assignment
      push: [expression, arrow, designator]

  arrow:
    - match: '<-'
      scope: storage.modifier.smpl
      pop: true

  expression:
    - match: '(?={{endexpr}}|{{endstats}})|\n'
      pop: true
    - include: term
    - match: \+|\-
      scope: keyword.operator.arithmetic.smpl
    - match: ;
      scope: punctuation.terminator.smpl
      pop: true

  term:
    - include: factor
    - match: \*|\/
      scope: keyword.operator.arithmetic.smpl

  factor:
    - include: funccall
    - match: '\b{{ident}}\b\s*'
      push: [brackets]
    - match: '\b{{number}}\b'
      scope: constant.numeric.integer.smpl
    - match: \(
      scope: punctuation.section.group.begin.smpl
      push:
        - meta_scope: meta.group.smpl
        - include: expression
        - match: \)
          scope: punctuation.section.group.end.smpl
          pop: true

  funccall:
    - match: \bcall\b
      scope: keyword.operator.function-call.smpl
      push:
        - match: '{{builtin_functions}}'
          scope: support.function.builtin.smpl
          push: [funcargs]
          pop: true
        - match: '\b{{ident}}\b\s*'
          scope: variable.function.smpl
          push: [funcargs]
          pop: true

  funcargs:
    - match: \(
      scope: meta.function.arguments.smpl punctuation.section.arguments.begin.smpl
      push:
        - meta_content_scope: meta.function.arguments.smpl
        - meta_scope: meta.group.smpl
        - include: expression
        - match: ','
          scope: punctuation.separator.arguments.smpl
        - match: \)
          scope: punctuation.section.arguments.end.smpl
          pop: true
    - match: (?!\()
      pop: true

  designator:
    - match: '\b{{ident}}\b\s*'
      push: [brackets]
      pop: true
